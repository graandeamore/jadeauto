{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amore\\\\Desktop\\\\jadeauto\\\\jadeauto\\\\client\\\\src\\\\components\\\\AppRouter.js\",\n    _s = $RefreshSig$();\n\n//pagination logic\nimport React, { useContext } from 'react';\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport { authRoutes, publicRoutes } from \"../routes\";\nimport { JADE_ROUTE } from '../utils/consts';\nimport { Context } from \"../index\";\nimport Layout from \"../containers/Layout/Layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppRouter = () => {\n  _s();\n\n  const {\n    user\n  } = useContext(Context); //get context from index.js\n\n  console.log(user);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [\"                                                                   \", user.isAuth && authRoutes.map(_ref => {\n      let {\n        path,\n        Component\n      } = _ref;\n      return (\n        /*#__PURE__*/\n        //if authorized generate auth-Routes\n        _jsxDEV(Route, {\n          path: path,\n          element: /*#__PURE__*/_jsxDEV(Layout, {\n            children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 60\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 52\n          }, this),\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this)\n      );\n    } //exact key means that path needs to be strict same\n    ), publicRoutes.map(_ref2 => {\n      let {\n        path,\n        Component\n      } = _ref2;\n      return (\n        /*#__PURE__*/\n        //if non-authorized generate public-Routes\n        _jsxDEV(Route, {\n          path: path,\n          element: /*#__PURE__*/_jsxDEV(Layout, {\n            children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 56\n          }, this),\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this)\n      );\n    }), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: JADE_ROUTE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 14\n    }, this), \"               \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AppRouter, \"JGtbL9nF23m+KDtp3kj55mw9GTc=\");\n\n_c = AppRouter;\nexport default AppRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"sources":["C:/Users/Amore/Desktop/jadeauto/jadeauto/client/src/components/AppRouter.js"],"names":["React","useContext","Routes","Route","Navigate","authRoutes","publicRoutes","JADE_ROUTE","Context","Layout","AppRouter","user","console","log","isAuth","map","path","Component"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,QAAvB,QAAsC,kBAAtC;AACA,SAAQC,UAAR,EAAmBC,YAAnB,QAAsC,WAAtC;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,SAAQC,OAAR,QAAsB,UAAtB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM;AAACC,IAAAA;AAAD,MAASV,UAAU,CAACO,OAAD,CAAzB,CAFoB,CAEe;;AAEnCI,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,sBACK,QAAC,MAAD;AAAA,sFACIA,IAAI,CAACG,MAAL,IAAeT,UAAU,CAACU,GAAX,CAAe;AAAA,UAAC;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,OAAD;AAAA;AAAA;AAAwC;AACvE,gBAAC,KAAD;AAAkB,UAAA,IAAI,EAAED,IAAxB;AAA8B,UAAA,OAAO,eAAE,QAAC,MAAD;AAAA,mCAAQ,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAR;AAAA;AAAA;AAAA;AAAA,kBAAvC;AAAuE,UAAA,KAAK;AAA5E,WAAYA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAD+B;AAAA,KAAf,CAC0E;AAD1E,KADnB,EAKIV,YAAY,CAACS,GAAb,CAAiB;AAAA,UAAC;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,OAAD;AAAA;AAAA;AAAgD;AAC9D,gBAAC,KAAD;AAAkB,UAAA,IAAI,EAAED,IAAxB;AAA8B,UAAA,OAAO,eAAE,QAAC,MAAD;AAAA,mCAAQ,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAR;AAAA;AAAA;AAAA;AAAA,kBAAvC;AAAuE,UAAA,KAAK;AAA5E,WAAYA,IAAZ;AAAA;AAAA;AAAA;AAAA;AADc;AAAA,KAAjB,CALJ,eAQI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,OAAO,eAAE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAET;AAAd;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADL;AAYH,CAlBD;;GAAMG,S;;KAAAA,S;AAoBN,eAAeA,SAAf","sourcesContent":["//pagination logic\r\nimport React, {useContext} from 'react';\r\nimport {Routes ,Route, Navigate} from \"react-router-dom\";\r\nimport {authRoutes,publicRoutes} from \"../routes\";\r\nimport {JADE_ROUTE} from '../utils/consts'\r\nimport {Context} from \"../index\";\r\nimport Layout from \"../containers/Layout/Layout\";\r\n\r\nconst AppRouter = () => {\r\n\r\n    const {user} = useContext(Context) //get context from index.js\r\n\r\n    console.log(user)\r\n\r\n    return (\r\n         <Routes>                                                                   {/*Routes.tag = IF NONE OF PATHS NOT WORKED -> WILL WORK THE LAST SET*/}\r\n            {user.isAuth && authRoutes.map(({path, Component}) =>                  //if authorized generate auth-Routes\r\n            <Route key={path} path={path} element={<Layout><Component/></Layout> } exact/>            //exact key means that path needs to be strict same\r\n            )}\r\n\r\n            {publicRoutes.map(({path, Component}) =>                          //if non-authorized generate public-Routes\r\n                <Route key={path} path={path} element={<Layout><Component/></Layout> } exact/>\r\n            )}\r\n             <Route path=\"*\" element={<Navigate to={JADE_ROUTE} />}/>               {/*home redirection from unpredictable url */}\r\n        </Routes>\r\n    );\r\n};\r\n\r\nexport default AppRouter;"]},"metadata":{},"sourceType":"module"}